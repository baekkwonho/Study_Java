// 주제: 리터럴(값) 표현 - 부동소수점이 메모리에 저장되는 원리
package step06;

public class Exam080 {
  public static final float value = 12.375f;

  public static void main(String[] args) {
    System.out.println(12.375f);

  }
}

/*
# 부동소수점을 메모리에 저장하는 원리
- 2진수로 변환(정규화라 부름, normalized)하여 저장한다.
- IEEE 754-1985 명세를 따른다.
- 변환 규칙
  32비트 => (부호비트;1)(지수부;8)(가수부;23)
  64비트 => (부호비트;1)(지수부;11)(가수부;52)
- 용어
  지수부(exponent), 가수부(fraction/mantissa)
- 예) 12.375f
0) 부호비트
  양수 => 0
1) 정수 부분을 2진수로 변환한다.
  12 => 1100 (2진수)
2) 소수점 이하 소수 부분을 2진수로 변환한다.
  소수에 2를 곱해서 나온 결과의 정수 부분을 사용한다.
  소수점 이하가 0이 나오거나 무한 반복하면 멈춘다.
  0.375 * 2 = 0.75 ====> 0
  0.75 * 2 = 1.5   ====> 1
  0.5 * 2 = 1.0    ====> 1
  0.375 => 0.011(이진수)
3) 부동소수점을 2진수로 표현한다.
  12.375 => 1100.011
4) 왼쪽에 1 한 개만 남도록 소수점을 이동한다.
  1100.011 = 1.100011 * 2^3
5) 가수부 추출
  => 왼쪽 1을 제외한 나머지 수
  => 100011
6) 지수부 추출
  => 2의 제곱값에 바이어스(K 값)을 더한다.
  => 3 + 127(K 값) = 130 = 1000 0010
7) 결과
0___ ____ _*** **** **** **** **** ****  <== 부호 비트 적용
0___ ____ _100 0110 0000 0000 0000 0000 <== 가수부 적용
0100 0001 0100 0110 0000 0000 0000 0000 <== 지수부 적용
=> 0x41460000

*/
