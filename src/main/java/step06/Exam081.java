// 주제: 리터럴(값) 표현 - 문자 표현
package step06;

public class Exam081 {
  public static final float value = 12.375f;

  public static void main(String[] args) {
    //1) 유니코드 값을 그냥 출력하면 정수로 간주한다.
    System.out.println(44032);

    //2) 유니코드에 해당하는 문자를 출력하고 싶다면 형변환해야 한다.
    System.out.println((char)44032); // 명시적 형변환을 통해 문자 출력을 지정한다.

    //3) 유니코드를 모를 때는 작은 따옴표('')를 이용하여 알아낸다.
    // => 작은 따옴표를 사용하면 형변환 할 필요가 없다.
    System.out.println('가'); // '가' 문자의 유니코드 값을 알아내어 출력한다.

    //4) 이스케이프 문자를 이용하여 유니코드를 지정할 수 있다.
    // => 단 16진수로 표현해야 한다.
    System.out.println('\uAC00'); // 물론 대소문자 상관없다.
    System.out.println('\uac00');
    // 궁금? 그냥 '가' 하면 되지 굳이 유니코드를 사용할 이유가 있는가?
    // => 특수 문자나 특정 언어의 문자를 지정하고 싶은데
    //    키보드에 해당 문자를 지정하는 키가 없는 경우
    System.out.println('\u5de5');
  }
}

/*
# ASCII (7bit)
- 영어 대소문자, 숫자, 특수문자 등 약 120개의 문자에 대해 코드 값을 정의하였다.
- 국제 표준 아니다.

# ISO-8859-1(ISO-Latin-1) (8bit)
- ASCII + 서유럽문자
- 국제 표준이다.

# EUC-KR (16bit)
- 영어는 ISO-8859-1 규칙을 사용하고,
  한글에 대해서만 별도의 규칙을 정의하였다.
  일부 특수 문자에 대해서 기존 규칙을 재정의하였다.
- 한글 한 음절(완성형)에 대해서 코드 값을 정의하였다.
- 단 약 2350자에 대해서만 코드 값을 정의하였다.
  (현재 유통되고 있는 음절 수는 약 11172자이다.)
  => 일반적인 문서를 작성하는데 한계가 있다.
- 국제 표준이다.

# 조합형(16bit)
- 초성(5bit), 중성(5bit), 종성(5bit) 각각에 대해 코드 값을 정의해두고,
  완성된 글자는 그 코드값을 합쳐서 16비트로 만들어 사용하는 방식이다.
- 아래아한글에서 도입하였다.
- 16비트 범위 중에 절반을 한글이 사용하기 때문에
  다른 나라 언어를 포함하지 못한다.
- 국제 표준이 아니다.

# MS949(16bit)
- EUC-KR + 추가 = 11172자
- MS 운영체제에서만 사용할 수 있다.
- 국제 표준이 아니다.

# Unicode(16bit)
- 최근 버전은 유니코드를 표현할 때 4바이트를 사용하고 있다.
- 한글의 경우 0xAC00 ~ ? = 11172자를 모두 포함하고 있다.
  여기에 더하여 옛 한글과 한국 전용 한자는 별도로 추가하였다.
- EUC-KR과 호환되지 않기 때문에 Unicode와 EUC-KR 사이에 변환이 필요하다.
- 국제 표준이다.
- 자바에서는 문자열을 다룰 때 유니코드를 기본 문자집합으로 사용한다.
- UTF-16 이라고도 불린다.

# UTF-8
- 유니코드의 변형 형식이다.
- ISO-8859-1 처럼 1바이트로 표현 가능한 것은 기존의 방식대로 사용하고,
  한글은 별도의 규칙에 따라 변환하여 사용한다.
- 한글의 경우 3바이트로 표현하기 때문에
  오리지널 유니코드보다 50% 더 메모리를 사용하는 문제가 있다.
- 국제 표준이다.
*/
