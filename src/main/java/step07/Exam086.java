// 주제: 변수 사용 - 배열과 주소 변수(레퍼런스)
package step07;

public class Exam086 {
  public static void main(String[] args) {
    //1) int 배열을 가리키는 변수 선언
    // => 이 변수는 배열이 존재하는 메모리의 주소를 저장한다.
    // => 이 변수를 "레퍼런스(reference)"라 부른다.
    int[] arr1;

    //2) int 배열 생성 및 그 주소 할당
    // => int 크기(4byte)의 메모리를 연속해서 확보한다.
    arr1 = new int[4];

    //3) 배열 메모리에 접근
    arr1[2] = 300;

    //4) 새로운 int 배열 생성 및 그 주소 할당
    arr1 = new int[3]; // arr1은 새로운 배열을 가리킨다.
    // 기존의 배열은?
    // => 기존 배열의 주소를 갖고 있는 변수가 없기 때문에
    //    사용할 수 없다.
    // => 이렇게 사용할 수 없는 메모리를 "가비지(garbage)"라 부른다.
    arr1[2] = 100;
  }
}

/*
# garbage(가비지)
- 해당 메모리의 주소를 담고있는 변수가 없을 때,
  그 메모리는 사용할 수 없는 상태가 되는데,
  이런 메모리를 가비지라 부른다.
- 다른 말로 "Dangling Object"라 한다.
- 가비지가 점유하고 있는 메모리는 사용할 수 없다.
  => 메모리 낭비?
  => 해결책? 메모리가 부족할 때 JVM이 이런 메모리를 찾아서 강제로 해제시키고,
             재활용한다.

# garbage collector(가비지 컬렉터)
- 참조할 수 없는 메모리를 강제 해제시키는 일을 한다.
- 동작?
  1) 메모리가 부족할 때
  2) Idle Time(한가할 때)
- 잠깐 실행하는 경우, 가비지 컬렉터가 실행되지 않는다.
  어차피 JVM이 종료되면 JVM이 사용한 모든 메모리가 OS에게
  자동으로 반납되기 때문이다.  
*/
